version: '3.8'

services:
  postgres:
    image: "postgres:18"
    container_name: "postgres"
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2210
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql

  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    platform: linux/amd64
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  eureka-server:
    build: ./discovery-server
    container_name: "eureka-server"
    restart: unless-stopped
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  config-server:
    build: ./config-server
    container_name: "config-server"
    restart: unless-stopped
    depends_on:
      eureka-server:
        condition: service_healthy
    ports:
      - "8889:8889"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8889/actuator/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka

  user-service:
    build: ./user-service
    container_name: "user-service"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=2210
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_VALIDATION_TIMEOUT=5000
      - SPRING_CLOUD_DISCOVERY_CLIENT_INITIALIZATION_TIMEOUT_SECONDS=180
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_INSTANCE_HOSTNAME=user-service
      - EUREKA_CLIENT_INITIAL_STATUS=STARTING
      - EUREKA_CLIENT_HEALTHCHECK_ENABLED=true
      - EUREKA_CLIENT_LEASE_EXPIRATION_DURATION_IN_SECONDS=30
      - SPRING_RETRY_MAX_ATTEMPTS=10
      - SPRING_RETRY_INITIAL_INTERVAL=2000
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8085:8085"
    command: sh -c './wait-for-it.sh eureka-server:8761 -- java -jar app.jar'

  notification-service:
    build: ./notification-service
    container_name: "notification-service"
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_DISCOVERY_CLIENT_INITIALIZATION_TIMEOUT_SECONDS=300
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=5
      - SPRING_CONFIG_IMPORT_TIMEOUT=120000
      - EUREKA_INSTANCE_HOSTNAME=notification-service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_PROPERTIES_MAX_POLL_INTERVAL_MS=300000
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SESSION_TIMEOUT_MS=60000
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_CLIENT_INITIAL_STATUS=STARTING
      - EUREKA_CLIENT_HEALTHCHECK_ENABLED=true
      - EUREKA_CLIENT_LEASE_EXPIRATION_DURATION_IN_SECONDS=30
      - SPRING_RETRY_MAX_ATTEMPTS=10
      - SPRING_RETRY_INITIAL_INTERVAL=2000
      - SPRING_PROFILES_ACTIVE=docker
  api-gateway:
    build: ./gateway-service
    container_name: "api-gateway"
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8889
      - EUREKA_INSTANCE_HOSTNAME=api-gateway
      - SPRING_CLOUD_DISCOVERY_CLIENT_INITIALIZATION_TIMEOUT_SECONDS=300
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=5
      - SPRING_CONFIG_IMPORT_TIMEOUT=120000
      - EUREKA_CLIENT_INITIAL_STATUS=STARTING
      - EUREKA_CLIENT_HEALTHCHECK_ENABLED=true
      - EUREKA_CLIENT_LEASE_EXPIRATION_DURATION_IN_SECONDS=30
      - SPRING_RETRY_MAX_ATTEMPTS=10
      - SPRING_RETRY_INITIAL_INTERVAL=2000
      - MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,gateway,routes,refresh
      - MANAGEMENT_ENDPOINT_HEALTH_ENABLED=true
      - MANAGEMENT_ENDPOINT_GATEWAY_ENABLED=true
      - SPRING_CLOUD_CONFIG_IMPORT_TIMEOUT=30000
      - SPRING_CLOUD_CONFIG_RETRY_ENABLED=true
      - SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL=2000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL=10000
      - SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS=20
volumes:
  postgres_data:
    name: postgres_data
